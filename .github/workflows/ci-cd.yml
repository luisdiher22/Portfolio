name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black bandit safety pytest-cov
    
    - name: Lint with flake8
      run: |
        flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app.py --count --exit-zero --max-complexity=15 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check app.py
    
    - name: Security check with bandit
      run: |
        bandit -r app.py -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check for known security vulnerabilities
      run: |
        safety scan --output=text --continue-on-error
      continue-on-error: true
    
    - name: Run tests
      run: |
        python -m pytest tests.py -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Verify package-lock.json
      run: |
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found. Running npm install..."
          npm install
        fi
    
    - name: Install dependencies
      run: |
        npm ci
    
    - name: Lint JavaScript
      run: |
        npx eslint static/script.js --format=stylish
    
    - name: Check JavaScript formatting
      run: |
        npx prettier --check static/script.js
    
    - name: Lint CSS
      run: |
        npx stylelint static/styles.css

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  build:
    needs: [test, lint-frontend, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run final tests
      run: |
        python -m pytest tests.py -v
    
    - name: Build verification
      run: |
        echo "Testing application startup..."
        timeout 10 python app.py &
        sleep 5
        echo "Application started successfully"
        pkill -f "python app.py" || true
    
    - name: Build summary
      run: |
        echo "âœ… All tests passed"
        echo "âœ… Security scans completed"
        echo "âœ… Code quality checks passed"
        echo "âœ… Application builds successfully"
        echo "ðŸš€ Ready for deployment to your chosen platform!"
